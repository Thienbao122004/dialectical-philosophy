"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"
import {
  ArrowRight,
  ArrowLeft,
  CheckCircle,
  Brain,
  Trophy,
  RefreshCw,
  Share2,
  Home,
  Clock,
  Target,
  BookOpen,
  Award,
  TrendingUp,
  X,
  Eye,
  ChevronDown,
  ChevronUp,
} from "lucide-react"

export default function QuizPage() {
  const [currentQuiz, setCurrentQuiz] = useState(0)
  const [selectedAnswers, setSelectedAnswers] = useState<Record<number, number>>({})
  const [showQuizResult, setShowQuizResult] = useState(false)
  const [quizScore, setQuizScore] = useState(0)
  const [timeLeft, setTimeLeft] = useState(600) // 10 minutes in seconds
  const [quizStarted, setQuizStarted] = useState(false)
  const [showReview, setShowReview] = useState(false)
  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null)

  const questions = [
    {
      question: "Theo Marx, c∆° s·ªü h·∫° t·∫ßng bao g·ªìm nh·ªØng y·∫øu t·ªë n√†o?",
      options: [
        "Ch·ªâ c√≥ l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t",
        "L·ª±c l∆∞·ª£ng s·∫£n xu·∫•t v√† quan h·ªá s·∫£n xu·∫•t", 
        "Ch·ªâ c√≥ quan h·ªá s·∫£n xu·∫•t",
        "C√°c th·ªÉ ch·∫ø ch√≠nh tr·ªã"
      ],
      correct: 1,
      explanation: "C∆° s·ªü h·∫° t·∫ßng bao g·ªìm c·∫£ l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t (c√¥ng ngh·ªá, lao ƒë·ªông) v√† quan h·ªá s·∫£n xu·∫•t (quan h·ªá s·ªü h·ªØu, ph√¢n ph·ªëi).",
      difficulty: "D·ªÖ"
    },
    {
      question: "Ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng l√† g√¨?",
      options: [
        "C√°c c√¥ng tr√¨nh ki·∫øn tr√∫c",
        "C√°c th·ªÉ ch·∫ø ch√≠nh tr·ªã, ph√°p l√Ω, vƒÉn h√≥a",
        "Ph∆∞∆°ng ti·ªán s·∫£n xu·∫•t",
        "Quan h·ªá lao ƒë·ªông"
      ],
      correct: 1,
      explanation: "Ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng bao g·ªìm c√°c th·ªÉ ch·∫ø ch√≠nh tr·ªã, ph√°p l√Ω, vƒÉn h√≥a, t√¥n gi√°o ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n n·ªÅn t·∫£ng c∆° s·ªü h·∫° t·∫ßng.",
      difficulty: "D·ªÖ"
    },
    {
      question: "M·ªëi quan h·ªá gi·ªØa c∆° s·ªü h·∫° t·∫ßng v√† ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng l√†:",
      options: [
        "M·ªôt chi·ªÅu: th∆∞·ª£ng t·∫ßng quy·∫øt ƒë·ªãnh c∆° s·ªü",
        "M·ªôt chi·ªÅu: c∆° s·ªü quy·∫øt ƒë·ªãnh th∆∞·ª£ng t·∫ßng",
        "T∆∞∆°ng t√°c bi·ªán ch·ª©ng qua l·∫°i",
        "Ho√†n to√†n ƒë·ªôc l·∫≠p"
      ],
      correct: 2,
      explanation: "ƒê√¢y l√† m·ªëi quan h·ªá t∆∞∆°ng t√°c bi·ªán ch·ª©ng: c∆° s·ªü h·∫° t·∫ßng quy·∫øt ƒë·ªãnh th∆∞·ª£ng t·∫ßng, nh∆∞ng th∆∞·ª£ng t·∫ßng c≈©ng c√≥ th·ªÉ ph·∫£n t√°c ƒë·ªông l·∫°i.",
      difficulty: "Trung b√¨nh"
    },
    {
      question: "C√°ch m·∫°ng c√¥ng nghi·ªáp l√† v√≠ d·ª• cho:",
      options: [
        "Th∆∞·ª£ng t·∫ßng quy·∫øt ƒë·ªãnh c∆° s·ªü",
        "C∆° s·ªü h·∫° t·∫ßng thay ƒë·ªïi d·∫´n ƒë·∫øn thay ƒë·ªïi th∆∞·ª£ng t·∫ßng",
        "S·ª± ƒë·ªôc l·∫≠p c·ªßa hai t·∫ßng",
        "Vai tr√≤ c·ªßa vƒÉn h√≥a"
      ],
      correct: 1,
      explanation: "C√°ch m·∫°ng c√¥ng nghi·ªáp thay ƒë·ªïi ph∆∞∆°ng ti·ªán s·∫£n xu·∫•t (c∆° s·ªü) d·∫´n ƒë·∫øn h√¨nh th√†nh giai c·∫•p c√¥ng nh√¢n v√† thay ƒë·ªïi c·∫•u tr√∫c x√£ h·ªôi (th∆∞·ª£ng t·∫ßng).",
      difficulty: "Trung b√¨nh"
    },
    {
      question: "Quan ƒëi·ªÉm duy v·∫≠t l·ªãch s·ª≠ c·ªßa Marx nh·∫•n m·∫°nh:",
      options: [
        "Vai tr√≤ quy·∫øt ƒë·ªãnh c·ªßa √Ω th·ª©c",
        "Vai tr√≤ quy·∫øt ƒë·ªãnh c·ªßa ƒëi·ªÅu ki·ªán v·∫≠t ch·∫•t",
        "Vai tr√≤ c·ªßa c√° nh√¢n vƒ© ƒë·∫°i",
        "T√≠nh ng·∫´u nhi√™n c·ªßa l·ªãch s·ª≠"
      ],
      correct: 1,
      explanation: "Quan ƒëi·ªÉm duy v·∫≠t l·ªãch s·ª≠ kh·∫≥ng ƒë·ªãnh ƒëi·ªÅu ki·ªán v·∫≠t ch·∫•t (c∆° s·ªü h·∫° t·∫ßng) quy·∫øt ƒë·ªãnh √Ω th·ª©c v√† s·ª± ph√°t tri·ªÉn x√£ h·ªôi.",
      difficulty: "Trung b√¨nh"
    },
    {
      question: "T√°c ph·∫©m n√†o ƒë·∫ßu ti√™n tr√¨nh b√†y chi ti·∫øt v·ªÅ m·ªëi quan h·ªá c∆° s·ªü - th∆∞·ª£ng t·∫ßng?",
      options: [
        "T∆∞ B·∫£n",
        "√ù Th·ª©c H·ªá ƒê·ª©c",
        "Ph√™ B√¨nh Kinh T·∫ø Ch√≠nh Tr·ªã",
        "Tuy√™n Ng√¥n ƒê·∫£ng C·ªông S·∫£n"
      ],
      correct: 1,
      explanation: "'√ù Th·ª©c H·ªá ƒê·ª©c' (1845-1846) c·ªßa Marx v√† Engels l√† t√°c ph·∫©m ƒë·∫ßu ti√™n tr√¨nh b√†y ho√†n ch·ªânh v·ªÅ kh√°i ni·ªám n√†y.",
      difficulty: "Kh√≥"
    },
    {
      question: "Trong x√£ h·ªôi hi·ªán ƒë·∫°i, Internet v√† AI thu·ªôc v·ªÅ:",
      options: [
        "Ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng",
        "C∆° s·ªü h·∫° t·∫ßng",
        "C·∫£ hai t·∫ßng",
        "Kh√¥ng thu·ªôc m√¥ h√¨nh Marx"
      ],
      correct: 2,
      explanation: "Internet v√† AI v·ª´a l√† ph∆∞∆°ng ti·ªán s·∫£n xu·∫•t (c∆° s·ªü) v·ª´a t·∫°o ra vƒÉn h√≥a s·ªë v√† thay ƒë·ªïi th·ªÉ ch·∫ø x√£ h·ªôi (th∆∞·ª£ng t·∫ßng).",
      difficulty: "Kh√≥"
    },
    {
      question: "L·ª±c l∆∞·ª£ng s·∫£n xu·∫•t bao g·ªìm:",
      options: [
        "Ch·ªâ c√≥ c√¥ng nh√¢n",
        "Ph∆∞∆°ng ti·ªán s·∫£n xu·∫•t + s·ª©c lao ƒë·ªông",
        "Ch·ªâ c√≥ m√°y m√≥c",
        "Quan h·ªá s·ªü h·ªØu"
      ],
      correct: 1,
      explanation: "L·ª±c l∆∞·ª£ng s·∫£n xu·∫•t = ph∆∞∆°ng ti·ªán s·∫£n xu·∫•t (c√¥ng c·ª•, m√°y m√≥c) + s·ª©c lao ƒë·ªông (con ng∆∞·ªùi v·ªõi k·ªπ nƒÉng).",
      difficulty: "D·ªÖ"
    },
    {
      question: "Theo Marx, thay ƒë·ªïi x√£ h·ªôi xu·∫•t ph√°t t·ª´:",
      options: [
        "√ù t∆∞·ªüng c·ªßa c√°c nh√† t∆∞ t∆∞·ªüng",
        "M√¢u thu·∫´n trong c∆° s·ªü h·∫° t·∫ßng",
        "Quy·∫øt ƒë·ªãnh c·ªßa nh√† c·∫ßm quy·ªÅn",
        "S·ª± thay ƒë·ªïi vƒÉn h√≥a"
      ],
      correct: 1,
      explanation: "Marx cho r·∫±ng thay ƒë·ªïi x√£ h·ªôi xu·∫•t ph√°t t·ª´ m√¢u thu·∫´n gi·ªØa l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t v√† quan h·ªá s·∫£n xu·∫•t trong c∆° s·ªü h·∫° t·∫ßng.",
      difficulty: "Kh√≥"
    },
    {
      question: "√ù nghƒ©a c·ªßa l√Ω thuy·∫øt Marx trong th·ªùi ƒë·∫°i hi·ªán t·∫°i:",
      options: [
        "ƒê√£ l·ªói th·ªùi ho√†n to√†n",
        "Ch·ªâ √°p d·ª•ng cho x√£ h·ªôi c≈©",
        "V·∫´n c√≥ gi√° tr·ªã ƒë·ªÉ ph√¢n t√≠ch x√£ h·ªôi hi·ªán ƒë·∫°i",
        "Ch·ªâ c√≥ √Ω nghƒ©a l·ªãch s·ª≠"
      ],
      correct: 2,
      explanation: "L√Ω thuy·∫øt Marx v·∫´n cung c·∫•p c√¥ng c·ª• ph√¢n t√≠ch h·ªØu √≠ch ƒë·ªÉ hi·ªÉu c√°c hi·ªán t∆∞·ª£ng x√£ h·ªôi, c√¥ng ngh·ªá v√† kinh t·∫ø ƒë∆∞∆°ng ƒë·∫°i.",
      difficulty: "Trung b√¨nh"
    }
  ]

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
  }

  const startQuiz = () => {
    setQuizStarted(true)
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(timer)
          setShowQuizResult(true)
          const score = questions.reduce((acc, q, index) => {
            return acc + (selectedAnswers[index] === q.correct ? 1 : 0)
          }, 0)
          setQuizScore(score)
          return 0
        }
        return prev - 1
      })
    }, 1000)
  }

  const resetQuiz = () => {
    setCurrentQuiz(0)
    setSelectedAnswers({})
    setShowQuizResult(false)
    setQuizScore(0)
    setTimeLeft(600)
    setQuizStarted(false)
    setShowReview(false)
    setExpandedQuestion(null)
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "D·ªÖ": return "text-green-600 bg-green-100"
      case "Trung b√¨nh": return "text-yellow-600 bg-yellow-100"
      case "Kh√≥": return "text-red-600 bg-red-100"
      default: return "text-gray-600 bg-gray-100"
    }
  }

  const getScoreLevel = (score: number) => {
    if (score >= 9) return { text: "üèÜ B·∫≠c Th·∫ßy!", color: "text-yellow-600", bg: "bg-yellow-50" }
    if (score >= 7) return { text: "üåü Xu·∫•t S·∫Øc!", color: "text-green-600", bg: "bg-green-50" }
    if (score >= 5) return { text: "üëç T·ªët!", color: "text-blue-600", bg: "bg-blue-50" }
    if (score >= 3) return { text: "üìö C·∫ßn C·ªë G·∫Øng!", color: "text-orange-600", bg: "bg-orange-50" }
    return { text: "üí™ H√£y H·ªçc Th√™m!", color: "text-red-600", bg: "bg-red-50" }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      {/* Header */}
      <nav className="bg-white/95 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-50">
        <div className="max-w-6xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link href="/" className="flex items-center gap-3 hover:scale-105 transition-transform duration-300">
                <div className="w-10 h-10 bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                  <span className="text-white font-bold text-lg">Œ¶</span>
                </div>
                <span className="text-xl font-bold text-gray-800">√în t·∫≠p</span>
              </Link>
            </div>
            
            <div className="flex items-center gap-4">
              {quizStarted && !showQuizResult && (
                <div className="flex items-center gap-2 bg-red-100 text-red-700 px-4 py-2 rounded-lg font-mono">
                  <Clock className="h-4 w-4" />
                  {formatTime(timeLeft)}
                </div>
              )}
              <Link href="/">
                <Button variant="outline" className="flex items-center gap-2">
                  <Home className="h-4 w-4" />
                  V·ªÅ Trang Ch·ªß
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-4xl mx-auto px-6 py-12">
        {!quizStarted ? (
          // Quiz Introduction
          <div className="text-center space-y-8">
            <div className="space-y-4">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto shadow-2xl">
                <Brain className="h-10 w-10 text-white" />
              </div>
              <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent">
                Quiz Tri·∫øt H·ªçc Marxist
              </h1>
              <p className="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
                Th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n v·ªÅ m·ªëi quan h·ªá bi·ªán ch·ª©ng gi·ªØa c∆° s·ªü h·∫° t·∫ßng v√† ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng
              </p>
            </div>

            <div className="grid md:grid-cols-3 gap-6 max-w-3xl mx-auto">
              <Card className="p-6 text-center hover:shadow-lg transition-all duration-300">
                <Target className="h-8 w-8 text-blue-600 mx-auto mb-3" />
                <h3 className="font-bold text-lg mb-2">10 C√¢u H·ªèi</h3>
                <p className="text-gray-600 text-sm">T·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao</p>
              </Card>
              
              <Card className="p-6 text-center hover:shadow-lg transition-all duration-300">
                <Clock className="h-8 w-8 text-green-600 mx-auto mb-3" />
                <h3 className="font-bold text-lg mb-2">10 Ph√∫t</h3>
                <p className="text-gray-600 text-sm">Th·ªùi gian l√†m b√†i</p>
              </Card>
              
              <Card className="p-6 text-center hover:shadow-lg transition-all duration-300">
                <Award className="h-8 w-8 text-purple-600 mx-auto mb-3" />
                <h3 className="font-bold text-lg mb-2">Ch·ª©ng Ch·ªâ</h3>
                <p className="text-gray-600 text-sm">Nh·∫≠n k·∫øt qu·∫£ chi ti·∫øt</p>
              </Card>
            </div>

            <div className="bg-white rounded-2xl p-8 shadow-xl border border-gray-100">
              <h3 className="text-2xl font-bold mb-6">üìö N·ªôi Dung Ki·ªÉm Tra</h3>
              <div className="grid md:grid-cols-2 gap-6 text-left">
                <div>
                  <h4 className="font-semibold text-blue-600 mb-3">üéØ Ch·ªß ƒë·ªÅ ch√≠nh:</h4>
                  <ul className="space-y-2 text-gray-600">
                    <li>‚Ä¢ C∆° s·ªü h·∫° t·∫ßng kinh t·∫ø</li>
                    <li>‚Ä¢ Ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng x√£ h·ªôi</li>
                    <li>‚Ä¢ M·ªëi quan h·ªá bi·ªán ch·ª©ng</li>
                    <li>‚Ä¢ V√≠ d·ª• th·ª±c ti·ªÖn</li>
                  </ul>
                </div>
                <div>
                  <h4 className="font-semibold text-purple-600 mb-3">üéì M·ª©c ƒë·ªô kh√≥:</h4>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <Badge className="bg-green-100 text-green-600">D·ªÖ</Badge>
                      <span className="text-gray-600">4 c√¢u</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className="bg-yellow-100 text-yellow-600">Trung b√¨nh</Badge>
                      <span className="text-gray-600">4 c√¢u</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className="bg-red-100 text-red-600">Kh√≥</Badge>
                      <span className="text-gray-600">2 c√¢u</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <Button 
              onClick={startQuiz}
              size="lg"
              className="text-xl px-12 py-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-xl hover:shadow-2xl transition-all duration-300"
            >
              <Brain className="mr-3 h-6 w-6" />
              B·∫Øt ƒê·∫ßu Quiz
              <ArrowRight className="ml-3 h-6 w-6" />
            </Button>
          </div>
        ) : !showQuizResult ? (
          // Quiz Questions
          <div className="space-y-8">
            <div className="bg-white rounded-2xl p-8 shadow-xl">
              {/* Progress Header */}
              <div className="mb-8">
                <div className="flex items-center justify-between mb-4">
                  <Badge variant="outline" className="text-lg px-4 py-2 font-bold">
                    C√¢u {currentQuiz + 1}/10
                  </Badge>
                  <Badge className={getDifficultyColor(questions[currentQuiz].difficulty)}>
                    {questions[currentQuiz].difficulty}
                  </Badge>
                </div>
                
                <Progress value={((currentQuiz + 1) / 10) * 100} className="h-3 mb-4" />
                
                <div className="flex gap-1 justify-center">
                  {Array.from({ length: 10 }, (_, i) => (
                    <div
                      key={i}
                      className={`w-4 h-4 rounded-full transition-all duration-300 ${
                        i < currentQuiz ? 'bg-green-500 shadow-lg' : 
                        i === currentQuiz ? 'bg-blue-500 shadow-lg scale-125' : 'bg-gray-200'
                      }`}
                    />
                  ))}
                </div>
              </div>

              {/* Question */}
              <div className="space-y-6">
                <h3 className="text-2xl font-bold leading-relaxed text-gray-800">
                  {questions[currentQuiz].question}
                </h3>
                
                <div className="space-y-3">
                  {questions[currentQuiz].options.map((option, index) => (
                    <button
                      key={index}
                      onClick={() => {
                        setSelectedAnswers(prev => ({
                          ...prev,
                          [currentQuiz]: index
                        }))
                      }}
                      className={`w-full p-5 text-left rounded-xl border-2 transition-all duration-300 hover:scale-[1.02] hover:shadow-md ${
                        selectedAnswers[currentQuiz] === index
                          ? 'border-blue-500 bg-blue-50 text-blue-700 font-semibold shadow-lg'
                          : 'border-gray-200 hover:border-blue-300 hover:bg-blue-25'
                      }`}
                    >
                      <div className="flex items-center gap-4">
                        <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-bold transition-all duration-300 ${
                          selectedAnswers[currentQuiz] === index
                            ? 'border-blue-500 bg-blue-500 text-white'
                            : 'border-gray-300 text-gray-500'
                        }`}>
                          {String.fromCharCode(65 + index)}
                        </div>
                        <span className="flex-1 text-lg">{option}</span>
                      </div>
                    </button>
                  ))}
                </div>

                {/* Navigation */}
                <div className="flex justify-between pt-8 border-t border-gray-100">
                  <Button
                    variant="outline"
                    onClick={() => setCurrentQuiz(Math.max(0, currentQuiz - 1))}
                    disabled={currentQuiz === 0}
                    className="flex items-center gap-2 px-6 py-3"
                  >
                    <ArrowLeft className="h-4 w-4" />
                    C√¢u tr∆∞·ªõc
                  </Button>
                  
                  {currentQuiz === 9 ? (
                    <Button
                      onClick={() => {
                        const score = questions.reduce((acc, q, index) => {
                          return acc + (selectedAnswers[index] === q.correct ? 1 : 0)
                        }, 0)
                        setQuizScore(score)
                        setShowQuizResult(true)
                      }}
                      disabled={selectedAnswers[currentQuiz] === undefined}
                      className="bg-green-600 hover:bg-green-700 px-6 py-3 text-lg font-semibold"
                    >
                      <CheckCircle className="h-5 w-5 mr-2" />
                      Ho√†n Th√†nh Quiz
                    </Button>
                  ) : (
                    <Button
                      onClick={() => setCurrentQuiz(currentQuiz + 1)}
                      disabled={selectedAnswers[currentQuiz] === undefined}
                      className="flex items-center gap-2 px-6 py-3"
                    >
                      C√¢u ti·∫øp
                      <ArrowRight className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              </div>
            </div>
          </div>
        ) : showReview ? (
          // Quiz Review
          <div className="space-y-6">
            <div className="flex items-center justify-between bg-white rounded-2xl p-6 shadow-xl">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full flex items-center justify-center">
                  <Eye className="h-6 w-6 text-white" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold">Chi Ti·∫øt B√†i L√†m</h2>
                  <p className="text-gray-600">Xem l·∫°i c√°c c√¢u tr·∫£ l·ªùi v√† gi·∫£i th√≠ch</p>
                </div>
              </div>
              <Button
                onClick={() => setShowReview(false)}
                variant="outline"
                className="flex items-center gap-2"
              >
                <X className="h-4 w-4" />
                ƒê√≥ng
              </Button>
            </div>

            <div className="space-y-4">
              {questions.map((question, qIndex) => {
                const userAnswer = selectedAnswers[qIndex]
                const isCorrect = userAnswer === question.correct
                const isExpanded = expandedQuestion === qIndex
                
                return (
                  <Card key={qIndex} className={`overflow-hidden transition-all duration-300 ${
                    isCorrect ? 'border-green-200 bg-green-50/50' : 'border-red-200 bg-red-50/50'
                  }`}>
                    <div 
                      className="p-6 cursor-pointer"
                      onClick={() => setExpandedQuestion(isExpanded ? null : qIndex)}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-3">
                            <Badge variant="outline" className="text-sm">
                              C√¢u {qIndex + 1}
                            </Badge>
                            <Badge className={getDifficultyColor(question.difficulty)}>
                              {question.difficulty}
                            </Badge>
                            <div className={`flex items-center gap-1 ${isCorrect ? 'text-green-600' : 'text-red-600'}`}>
                              {isCorrect ? <CheckCircle className="h-4 w-4" /> : <X className="h-4 w-4" />}
                              <span className="font-semibold text-sm">
                                {isCorrect ? 'ƒê√∫ng' : 'Sai'}
                              </span>
                            </div>
                          </div>
                          
                          <h3 className="text-lg font-semibold mb-2 text-gray-800">
                            {question.question}
                          </h3>
                          
                          <div className="flex items-center gap-4 text-sm text-gray-600">
                            <span>B·∫°n ch·ªçn: <strong>{userAnswer !== undefined ? String.fromCharCode(65 + userAnswer) : 'Kh√¥ng tr·∫£ l·ªùi'}</strong></span>
                            <span>ƒê√°p √°n: <strong>{String.fromCharCode(65 + question.correct)}</strong></span>
                          </div>
                        </div>
                        
                        <Button variant="ghost" size="sm">
                          {isExpanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                        </Button>
                      </div>
                      
                      {isExpanded && (
                        <div className="mt-6 pt-6 border-t border-gray-200 space-y-4">
                          <div>
                            <h4 className="font-semibold mb-3 text-gray-700">C√°c l·ª±a ch·ªçn:</h4>
                            <div className="space-y-2">
                              {question.options.map((option, oIndex) => (
                                <div
                                  key={oIndex}
                                  className={`p-3 rounded-lg border text-sm ${
                                    oIndex === question.correct
                                      ? 'border-green-300 bg-green-100 text-green-800'
                                      : oIndex === userAnswer && userAnswer !== question.correct
                                      ? 'border-red-300 bg-red-100 text-red-800'
                                      : 'border-gray-200 bg-gray-50'
                                  }`}
                                >
                                  <div className="flex items-center gap-2">
                                    <span className="font-semibold">
                                      {String.fromCharCode(65 + oIndex)}.
                                    </span>
                                    <span>{option}</span>
                                    {oIndex === question.correct && (
                                      <CheckCircle className="h-4 w-4 text-green-600 ml-auto" />
                                    )}
                                    {oIndex === userAnswer && userAnswer !== question.correct && (
                                      <X className="h-4 w-4 text-red-600 ml-auto" />
                                    )}
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                          
                          <div className="bg-blue-50 p-4 rounded-lg">
                            <h4 className="font-semibold mb-2 text-blue-800 flex items-center gap-2">
                              <BookOpen className="h-4 w-4" />
                              Gi·∫£i th√≠ch:
                            </h4>
                            <p className="text-blue-700 leading-relaxed">
                              {question.explanation}
                            </p>
                          </div>
                        </div>
                      )}
                    </div>
                  </Card>
                )
              })}
            </div>

            <div className="text-center pt-6">
              <Button
                onClick={() => setShowReview(false)}
                size="lg"
                className="bg-blue-600 hover:bg-blue-700 px-8"
              >
                Quay L·∫°i K·∫øt Qu·∫£
              </Button>
            </div>
          </div>
        ) : (
          // Quiz Results
          <div className="text-center space-y-8">
            <div className="bg-white rounded-2xl p-8 shadow-2xl">
              <div className="mb-8">
                <div className="w-24 h-24 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-6 shadow-2xl">
                  <Trophy className="h-12 w-12 text-white" />
                </div>
                <h2 className="text-4xl font-bold mb-4">Ch√∫c M·ª´ng!</h2>
                <p className="text-xl text-gray-600 mb-6">B·∫°n ƒë√£ ho√†n th√†nh Quiz Tri·∫øt H·ªçc Marxist</p>
              </div>

              <div className="grid md:grid-cols-2 gap-8 mb-8">
                <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-6">
                  <div className="text-6xl font-bold text-blue-600 mb-2">{quizScore}/10</div>
                  <div className="text-lg text-blue-700 font-semibold mb-4">
                    {Math.round((quizScore / 10) * 100)}% Ch√≠nh X√°c
                  </div>
                  <div className={`inline-block px-4 py-2 rounded-lg ${getScoreLevel(quizScore).bg} ${getScoreLevel(quizScore).color} font-bold`}>
                    {getScoreLevel(quizScore).text}
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="bg-green-100 p-4 rounded-lg">
                      <div className="text-green-700 font-semibold">C√¢u ƒê√∫ng</div>
                      <div className="text-3xl font-bold text-green-600">{quizScore}</div>
                    </div>
                    <div className="bg-red-100 p-4 rounded-lg">
                      <div className="text-red-700 font-semibold">C√¢u Sai</div>
                      <div className="text-3xl font-bold text-red-600">{10 - quizScore}</div>
                    </div>
                  </div>
                  
                  <div className="bg-yellow-100 p-4 rounded-lg">
                    <div className="text-yellow-700 font-semibold">Th·ªùi Gian C√≤n L·∫°i</div>
                    <div className="text-2xl font-bold text-yellow-600">{formatTime(timeLeft)}</div>
                  </div>
                </div>
              </div>

              <div className="flex gap-4 justify-center flex-wrap">
                <Button
                  onClick={() => setShowReview(true)}
                  variant="outline"
                  className="bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700 px-8 py-3"
                >
                  <Eye className="h-4 w-4 mr-2" />
                  Xem Chi Ti·∫øt
                </Button>
                <Button
                  onClick={resetQuiz}
                  className="bg-blue-600 hover:bg-blue-700 px-8 py-3"
                >
                  <RefreshCw className="h-4 w-4 mr-2" />
                  L√†m L·∫°i Quiz
                </Button>
                <Button
                  variant="outline"
                  onClick={() => {
                    const result = {
                      score: quizScore,
                      total: 10,
                      percentage: Math.round((quizScore / 10) * 100),
                      level: getScoreLevel(quizScore).text,
                      timeLeft: formatTime(timeLeft)
                    }
                    navigator.clipboard.writeText(`üß† Quiz Tri·∫øt H·ªçc Marxist\nüìä K·∫øt qu·∫£: ${result.score}/10 (${result.percentage}%)\nüèÜ C·∫•p ƒë·ªô: ${result.level}\n‚è∞ Th·ªùi gian: ${result.timeLeft}\nüìÖ ${new Date().toLocaleDateString('vi-VN')}\nüåê Dialectical Philosophy Platform`)
                    
                    const notification = document.createElement('div')
                    notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50'
                    notification.innerHTML = '‚úÖ ƒê√£ sao ch√©p k·∫øt qu·∫£ chi ti·∫øt!'
                    document.body.appendChild(notification)
                    setTimeout(() => notification.remove(), 3000)
                  }}
                  className="px-8 py-3"
                >
                  <Share2 className="h-4 w-4 mr-2" />
                  Chia S·∫ª K·∫øt Qu·∫£
                </Button>
              </div>
            </div>

            <div className="bg-gradient-to-r from-purple-100 to-blue-100 rounded-xl p-6">
              <h3 className="text-xl font-bold mb-4">üéØ Mu·ªën c·∫£i thi·ªán ƒëi·ªÉm s·ªë?</h3>
              <div className="grid md:grid-cols-3 gap-4 text-sm">
                <div className="bg-white p-4 rounded-lg">
                  <BookOpen className="h-6 w-6 text-blue-600 mb-2" />
                  <h4 className="font-semibold mb-1">ƒê·ªçc Th√™m T√†i Li·ªáu</h4>
                  <p className="text-gray-600">Kh√°m ph√° th√™m v·ªÅ tri·∫øt h·ªçc Marx</p>
                </div>
                <div className="bg-white p-4 rounded-lg">
                  <TrendingUp className="h-6 w-6 text-green-600 mb-2" />
                  <h4 className="font-semibold mb-1">Luy·ªán T·∫≠p Th√™m</h4>
                  <p className="text-gray-600">L√†m l·∫°i quiz ƒë·ªÉ c·ªßng c·ªë ki·∫øn th·ª©c</p>
                </div>
                <div className="bg-white p-4 rounded-lg">
                  <Target className="h-6 w-6 text-purple-600 mb-2" />
                  <h4 className="font-semibold mb-1">Tham Gia Th·∫£o Lu·∫≠n</h4>
                  <p className="text-gray-600">K·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng h·ªçc t·∫≠p</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
